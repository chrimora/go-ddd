// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const claimNextEventBatch = `-- name: ClaimNextEventBatch :many
WITH candidates AS (
    SELECT o1.id
    FROM event_outbox o1
    WHERE NOT EXISTS (
        SELECT 1
        FROM event_outbox o2
        WHERE o2.aggregate_id = o1.aggregate_id
        AND o2.created_at < o1.created_at
        AND o2.status IN ('Pending', 'Claimed')
    )
    AND o1.status = 'Pending'
    AND o1.retries < $2
    ORDER BY o1.created_at, o1.aggregate_id
    FOR UPDATE SKIP LOCKED
    LIMIT $1
)
UPDATE event_outbox
SET status = 'Claimed', updated_at = now()
WHERE id IN (SELECT id FROM candidates)
RETURNING id, aggregate_id, aggregate_type, event_context, event_type, payload, created_at, updated_at, retries, status
`

type ClaimNextEventBatchParams struct {
	Limit   int32
	Retries int32
}

func (q *Queries) ClaimNextEventBatch(ctx context.Context, arg ClaimNextEventBatchParams) ([]EventOutbox, error) {
	rows, err := q.db.Query(ctx, claimNextEventBatch, arg.Limit, arg.Retries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventOutbox{}
	for rows.Next() {
		var i EventOutbox
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.AggregateType,
			&i.EventContext,
			&i.EventType,
			&i.Payload,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Retries,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const completeEvent = `-- name: CompleteEvent :exec
UPDATE event_outbox
SET status = 'Published', updated_at = now()
WHERE id = $1
`

func (q *Queries) CompleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, completeEvent, id)
	return err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO event_outbox (
    id,
    aggregate_id,
    aggregate_type,
    event_context,
    event_type,
    payload,
    created_at,
    updated_at,
    retries,
    status
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id
`

type CreateEventParams struct {
	ID            uuid.UUID
	AggregateID   uuid.UUID
	AggregateType string
	EventContext  []byte
	EventType     string
	Payload       []byte
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Retries       int32
	Status        EventStatus
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.AggregateID,
		arg.AggregateType,
		arg.EventContext,
		arg.EventType,
		arg.Payload,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Retries,
		arg.Status,
	)
	return err
}

const requeueStaleEvents = `-- name: RequeueStaleEvents :many
UPDATE event_outbox
SET status = 'Pending', retries = retries + 1, updated_at = now()
WHERE status = 'Claimed'
AND updated_at < $1
AND retries < $2
RETURNING id
`

type RequeueStaleEventsParams struct {
	UpdatedAt time.Time
	Retries   int32
}

func (q *Queries) RequeueStaleEvents(ctx context.Context, arg RequeueStaleEventsParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, requeueStaleEvents, arg.UpdatedAt, arg.Retries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
