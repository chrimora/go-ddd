// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package outboxdb

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO event_outbox (event_type, payload)
VALUES ($1, $2)
`

type CreateEventParams struct {
	EventType string
	Payload   []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent, arg.EventType, arg.Payload)
	return err
}

const getNextEvent = `-- name: GetNextEvent :one
SELECT id, event_type, payload, created_at, updated_at, retries, processed_at
FROM event_outbox
WHERE processed_at IS NULL
AND retries < 3
ORDER BY created_at
LIMIT 1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetNextEvent(ctx context.Context) (EventOutbox, error) {
	row := q.db.QueryRow(ctx, getNextEvent)
	var i EventOutbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Retries,
		&i.ProcessedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE event_outbox
SET updated_at = now(),
    retries = $2,
    processed_at = $3
WHERE id = $1
RETURNING id
`

type UpdateEventParams struct {
	ID          int32
	Retries     int32
	ProcessedAt *time.Time
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateEvent, arg.ID, arg.Retries, arg.ProcessedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}
