// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package userdb

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, updated_at, name FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.UpdatedAt, &i.Name)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $3, updated_at = now()
WHERE id = $1
AND updated_at = $2
RETURNING id
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.UpdatedAt, arg.Name)
	return err
}
